# actions, all contexful
(def @removeAll context:removeAll)
(def @removeTop context:removeTop)
(def @stackOnTop context:stackOnTop)
(def @doubleTop context:doubleTop)

# uncontextful binary set ops
(def @setUnion setUnion)
(def @setIntersection setIntersection)
(def @setDifference setDifference)

# uncontextful unary set ops
(def @leftMost1 leftMost1)
(def @rightMost1 rightMost1)
(def @leftMost leftMost)
(def @rightMost rightMost)
(def @complement complement)

# contextful first level primitives
(def @getColor context:getColor)
(def @getTopColor context:getTopColor)
(def @getAll context:getAll)
(def @getNonEmpty context:getNonEmpty)
(def @getGEQ context:getGEQ)

# final ops
(def @wallToString wallToString)
####### Start of the actual grammar
# generates (NumColors+1) * (NumSets) = 125, 180
# NumSets = (NumColors+1)*(1+2+2) = 25, 30

(rule $ROOT ($Action) (lambda a (call @wallToString (var a)) )) # excecute some action
(rule $Action ( $Set3 ) (lambda s (call @removeTop (var s) )))
(rule $Action ( $Set3 $Color )
      (lambda s (lambda c (call @stackOnTop (var s) (var c)))))
(rule $Set3 ($Set2) (IdentityFn))
(rule $Set3 ($Set1) (IdentityFn))
(rule $Set3 ($Set) (IdentityFn))
(for @x (0 1 2 3) 
     (rule $Color (tok) (ConstantFn (number @x COLOR)))
)
(for @x (1) 
     (rule $Count (tok) (ConstantFn (number @x COUNT)))
)
# (rule $Set (tok) (ConstantFn (call @getAll)))
(rule $Set (tok) (ConstantFn (call @getNonEmpty)))

# (rule $Set ($Color) (lambda c (call @getColor (var c) )))
(rule $Set ($Color) (lambda c (call @getTopColor (var c) )))

(rule $Set1 ($Set) (lambda s (call @leftMost1 (var s) )))
(rule $Set1 ($Set) (lambda s (call @rightMost1 (var s) )))

(rule $Set2 ($Set) (lambda s (call @complement (var s) )))
(rule $Set2 ($Set1) (lambda s (call @complement (var s) )))

(when usemore 
(rule $Set1 ($Set) (lambda s (call @leftMost  (var s) (number 1 COUNT))))
(rule $Set1 ($Set) (lambda s (call @rightMost (var s) (number 1 COUNT))))
(rule $Set ($Set $Count) (lambda s (lambda n (call @leftMost (var s) (var n) ))))
(rule $Set ($Set $Count) (lambda s (lambda n (call @rightMost (var s) (var n)))))
(rule $Set ($Count) (lambda h (call @getGEQ (var h))))

(rule $Set2 ($Set $Set) (lambda s1 (lambda s2
(call @setIntersection (var s1) (var s2)))))
(rule $Set2 ($Set $Set) (lambda s1 (lambda s2
(call @setUnion (var s1) (var s2)))))
(rule $Set2 ($Set $Set) (lambda s1 (lambda s2
(call @setDifference (var s1) (var s2)))))
(rule $Count ($TOKEN) (NumberFn) (anchored 1))
)